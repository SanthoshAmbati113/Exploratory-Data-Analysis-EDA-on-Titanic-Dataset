# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lXl9tj8VqUd7f8ENK8hE9CoWcMLRJ8ZE
"""

import pandas as pd

df=pd.read_csv('Titanic-Dataset.csv',index_col='PassengerId')

# Assuming df is your DataFrame
summary_stats = df.describe().T  # includes count, mean, std, min, 25%, 50% (median), 75%, max
summary_stats['median'] = df.median(numeric_only=True)
print(summary_stats)

import matplotlib.pyplot as plt
import seaborn as sns

# Histograms
df.hist(figsize=(12, 8), bins=30)
plt.suptitle('Histograms of Numeric Features')
plt.tight_layout()
plt.show()

# Boxplots
plt.figure(figsize=(12, 8))
sns.boxplot(data=df.select_dtypes(include='number'), orient='h')
plt.title('Boxplots of Numeric Features')
plt.show()

# Correlation matrix heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()

# Pairplot (use only subset of features if dataset is large)
sns.pairplot(df.select_dtypes(include='number'))
plt.suptitle("Pairplot of Numeric Features", y=1.02)
plt.show()

# For identifying outliers using boxplots
for column in df.select_dtypes(include='number').columns:
    plt.figure(figsize=(6, 1.5))
    sns.boxplot(x=df[column])
    plt.title(f'Boxplot for {column}')
    plt.show()

# For checking missing values
missing = df.isnull().sum()
print("Missing values:\n", missing[missing > 0])

# Trend over time (if time-based column like 'date' exists)
if 'date' in df.columns:
    df['date'] = pd.to_datetime(df['date'])
    df.set_index('date')[df.select_dtypes(include='number').columns].plot(subplots=True, figsize=(12, 8))
    plt.suptitle("Trends Over Time")
    plt.tight_layout()
    plt.show()

# Example: Grouping by a categorical feature to check mean of numeric features
if 'category' in df.columns:
    group_mean = df.groupby('category').mean(numeric_only=True)
    print("Mean of numeric features grouped by category:\n", group_mean)

    # Barplot to visualize
    for col in df.select_dtypes(include='number').columns:
        plt.figure()
        sns.barplot(x='category', y=col, data=df)
        plt.title(f'Mean {col} by Category')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()